% function model = reconstruct_point_cloud(cam, data)
%
% Method:   Determines the 3D model points by triangulation
%           of a stereo camera system. We assume that the data 
%           is already normalized 
% 
%           Requires that the number of cameras is C=2.
%           Let N be the number of points.
%
% Input:    points2d is a 3xNxC array, storing all image points.
%
%           cameras is a 3x4xC array, where cameras(:,:,1) is the first and 
%           cameras(:,:,2) is the second camera matrix.
% 
% Output:   points3d 4xN matrix of all 3d points.


function points3d = reconstruct_point_cloud( cameras, points2d )

%------------------------------
% TODO: FILL IN THIS PART

[~, N, ~] = size(points2d);
W = zeros(4*N, 4);
for i = 1 : N
    W(i*4 : i*4+3, :) = [points2d(1, i, 1) * cameras(3, 1, 1) - cameras(1, 1, 1) ...
        points2d(1, i, 1) * cameras(3, 2, 1) - cameras(1, 2, 1) ...
        points2d(1, i, 1) * cameras(3, 3, 1) - cameras(1, 3, 1) ...
        points2d(1, i, 1) * cameras(3, 4, 1) - cameras(1, 4, 1); ...
        points2d(2, i, 1) * cameras(3, 1, 1) - cameras(2, 1, 1) ...
        points2d(2, i, 1) * cameras(3, 2, 1) - cameras(2, 2, 1) ...
        points2d(2, i, 1) * cameras(3, 3, 1) - cameras(2, 3, 1) ...
        points2d(2, i, 1) * cameras(3, 4, 1) - cameras(2, 4, 1); ...
        points2d(1, i, 2) * cameras(3, 1, 2) - cameras(1, 1, 2) ...
        points2d(1, i, 2) * cameras(3, 2, 2) - cameras(1, 2, 2) ...
        points2d(1, i, 2) * cameras(3, 3, 2) - cameras(1, 3, 2) ...
        points2d(1, i, 2) * cameras(3, 4, 2) - cameras(1, 4, 2); ...
        points2d(2, i, 2) * cameras(3, 1, 2) - cameras(2, 1, 2) ...
        points2d(2, i, 2) * cameras(3, 2, 2) - cameras(2, 2, 2) ...
        points2d(2, i, 2) * cameras(3, 3, 2) - cameras(2, 3, 2) ...
        points2d(2, i, 2) * cameras(3, 4, 2) - cameras(2, 4, 2)];
end

points3d = zeros(4, N);
for i = 1 : N
    [~, ~, V] = svd(W(i*4 : i*4+3, :));
    points3d(:, i) = V(:, end);
end